name: Conditional Build and Release

on:
  push:
    branches:
      - main  # Run this workflow when there is a push to the main branch

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Check for --b in commit message
      id: check_message
      run: |
        echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
        if [[ "${COMMIT_MESSAGE}" != *"--b"* ]]; then
          echo "Commit message does not contain --b. Exiting."
          exit 0
        fi

    - name: Set up Python
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      run: |
        python -m pip install --upgrade pip
        pip install pillow
        pip install pyinstaller

    - name: Build executable
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico main.py

    - name: Create archive
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      run: |
        tar -czvf macos-executable.tar.gz -C dist .

    - name: Upload artifact
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      uses: actions/upload-artifact@v2
      with:
        name: macos-executable
        path: macos-executable.tar.gz

    - name: Create GitHub Release
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: env.COMMIT_MESSAGE && contains(env.COMMIT_MESSAGE, '--b')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
        curl -XPOST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/gzip" \
            --data-binary @macos-executable.tar.gz \
            "${UPLOAD_URL}?name=macos-executable.tar.gz"
